use Mix.Config

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :web_nodb, WebNodb.Endpoint,
  http: [port: {:system, "PORT"}],
  url: [host: "elixir3.lovesaemi.daemon.asia", por: 80],
  cache_static_manifest: "priv/static/manifest.json"


# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :web_nodb, WebNodb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :web_nodb, WebNodb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :web_nodb, WebNodb.Endpoint, server: true
#

# Finally import the config/prod.secret.exs
# which should be versioned separately.
# import_config "prod.secret.exs"

# Do not print debug messages in production
# config :logger, level: :warn
config :logger,
  # :error_log というキーに対して、LoggerFileBackend を紐付けます
  backends: [{LoggerFileBackend, :error_log}]

# :error_log の設定
config :logger, :error_log,
  # ログの保存先, ファイル名
  path: "/var/log/app/elixir_web_app/error.log",
  # 対象とするレベル
  level: :error,
  # ログフォーマット
  format: "$time $metadata[$level] $message\n",
  # メタデータの要素
  metadata: [:request_id]